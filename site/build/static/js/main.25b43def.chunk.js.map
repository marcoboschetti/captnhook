{"version":3,"sources":["context/BucketProvider.js","components/WebhookDetails.js","components/Webhooks.js","components/BucketConfig.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["BucketContext","createContext","useBucket","useContext","BucketProvider","children","useState","bucketState","setSingletonState","navigate","useNavigate","useEffect","bucketIdQueryParam","URLSearchParams","window","location","search","get","bucketID","uuidv4","pathname","id","Provider","value","WebhookDetails","props","selectedWebhook","bodyElem","body","parsed","JSON","parse","src","name","displayDataTypes","e","key","timestamp","url","method","headers","map","header","index","DisplayWebhooks","retrievedWebhooks","setRetrievedWebhooks","setSelectedWebhook","fieldsSummary","setFieldsSummary","retrieveWebhooks","bucketId","a","axios","response","data","deleteWebhook","webhook","post","then","res","deleteBucket","webhookList","length","webhookSummaryFields","split","field","push","k","v","console","log","onClick","style","cursor","Row","Col","className","dateFormat","dateSeparator","timeSeparator","Button","variant","Container","maxWidth","textAlign","bottom","Form","Group","controlId","Control","type","placeholder","onChange","event","target","BucketConfig","status_code","response_body","config","setConfig","getBucketConfig","saveBucketConfig","Label","parseInt","as","rows","Header","apiRoot","origin","App","basename","Component","Boolean","hostname","match","queryClient","QueryClient","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.25b43def.chunk.js","sourcesContent":["import React from \"react\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useNavigate } from 'react-router-dom';\n\nconst BucketContext = createContext();\n\nexport const useBucket = () => {\n    return useContext(BucketContext);\n};\n\nexport const BucketProvider = ({ children }) => {\n    const [bucketState, setSingletonState] = useState(null);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        let searchParams = new URLSearchParams(window.location.search);\n        let bucketIdQueryParam = searchParams.get('bucket_id');\n        var bucketID = bucketIdQueryParam;\n\n        if (!bucketIdQueryParam) {\n            bucketID = uuidv4()\n            navigate({\n                pathname: '/',\n                search: '?bucket_id=' + bucketID,\n            });\n        }\n        setSingletonState({\n            id: bucketID\n        });\n    }, []);\n\n    return (\n        <BucketContext.Provider value={bucketState}>\n            {children}\n        </BucketContext.Provider>\n    );\n};","import React from 'react';\nimport ReactJson from 'react-json-view'\n\nexport const WebhookDetails = (props) => {\n    var selectedWebhook = props.selectedWebhook;\n    if (!selectedWebhook) {\n        return <div>\n            Please select a webhook to see details\n        </div>\n    }\n\n    var bodyElem = selectedWebhook.body\n    try {\n        var parsed = JSON.parse(selectedWebhook.body)\n        bodyElem = <ReactJson src={parsed} name={null} displayDataTypes={false} />\n    } catch (e) { }\n\n    return (\n        <div>\n            <h1>Webhook Details</h1>\n            <ul>\n                <li key={selectedWebhook.id}>\n                    <strong>ID:</strong> {selectedWebhook.id}<br />\n                    <strong>Timestamp:</strong> {selectedWebhook.timestamp}<br />\n                    <strong>URL:</strong> {selectedWebhook.url}<br />\n                    <strong>Method:</strong> {selectedWebhook.method}<br />\n                    <strong>Headers:</strong>\n                    <ul>\n                        {selectedWebhook.headers.map((header, index) => (\n                            <li key={index}>{header}</li>\n                        ))}\n                    </ul>\n                    <hr />\n                    <strong>Body:</strong>{bodyElem}\n                    <br />\n                    <hr />\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default WebhookDetails;\n\n","import React, { useState } from \"react\";\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport axios from \"axios\";\nimport Button from 'react-bootstrap/Button';\nimport SimpleDateTime from 'react-simple-timestamp-to-date';\nimport Form from 'react-bootstrap/Form';\nimport { FaTrash, FaRedo } from \"react-icons/fa\";\n\nimport { useBucket } from '../context/BucketProvider';\nimport { WebhookDetails } from '../components/WebhookDetails';\n\nexport const apiPath = \"\"\n// export const apiPath = \"http://localhost:8080\"\n\nexport const DisplayWebhooks = () => {\n    const [retrievedWebhooks, setRetrievedWebhooks] = useState([]);\n    const [selectedWebhook, setSelectedWebhook] = useState(null);\n    const [fieldsSummary, setFieldsSummary] = useState(\"\");\n\n    // Queries\n    const retrieveWebhooks = async (bucketId) => {\n        const response = await axios.get(apiPath + \"/api/\" + bucketId + \"/check\");\n        setRetrievedWebhooks(response.data);\n    };\n    const deleteWebhook = async (bucketId, webhook) => {\n        axios.post(apiPath + \"/api/\" + bucketId + \"/delete/\" + webhook.id)\n            .then(res => { retrieveWebhooks(bucketId); })\n    };\n    const deleteBucket = async (bucketId) => {\n        axios.post(apiPath + \"/api/\" + bucketId + \"/delete\")\n            .then(res => { retrieveWebhooks(bucketId); setSelectedWebhook(null); })\n    };\n\n\n    // Resolve bucket\n    const bucketState = useBucket();\n    var bucketId = \"\";\n    if (bucketState) {\n        bucketId = bucketState.id;\n    }\n\n    // Handle request\n    var webhookList = \"\";\n    if (!retrievedWebhooks || !retrievedWebhooks.length) {\n        retrieveWebhooks(bucketId);\n        webhookList = \"No webhooks found\"\n    } else {\n\n        // Populate summary fields\n        var webhookSummaryFields = {}\n        retrievedWebhooks.map((webhook) => {\n            webhookSummaryFields[webhook.id] = [];\n            var parsed = null;\n            try {\n                parsed = JSON.parse(webhook.body)\n            } catch (e) { }\n            fieldsSummary.split(\",\").map((field) => {\n                if (parsed && parsed[field]) {\n                    webhookSummaryFields[webhook.id].push({ k: field, v: parsed[field] })\n                }\n            })\n        })\n\n        console.log(webhookSummaryFields)\n\n        webhookList = <ul>\n            {retrievedWebhooks.map((webhook) => (\n                <li key={webhook.id} onClick={() => setSelectedWebhook(webhook)} style={{ cursor: 'pointer' }}>\n                    <Row>\n                        <Col className='col-10'>\n                            <strong>ID:</strong> {webhook.id}<br />\n                            <strong>Timestamp:</strong>\n                            <SimpleDateTime dateFormat=\"DMY\" dateSeparator=\"/\" timeSeparator=\":\">{webhook.timestamp}</SimpleDateTime>\n                            <br />\n                            <strong>Method:</strong> {webhook.method}<br />\n                            {webhookSummaryFields[webhook.id].map((header) => (\n                                <div key={header.k}>\n                                    <strong>{header.k}:</strong> {header.v}<br />\n                                </div>\n                            ))}\n                        </Col>\n                        <Col className='col-2'>\n                            <Button onClick={() => deleteWebhook(bucketId, webhook)} variant=\"warning\">\n                                <FaTrash />\n                            </Button>\n                        </Col>\n                    </Row>\n                    <hr />\n                </li>\n            ))}\n        </ul>\n    }\n\n    // Render\n    return (\n        <Container style={{ maxWidth: \"unset\" }}>\n            <Row>\n                <Col className='col-3'>\n                    <Row className=\"align-items-center\">\n                        <Col>\n                            <h1>Calls</h1>\n                        </Col>\n                        <Col style={{ textAlign: 'right', bottom: 0 }}>\n                            <Button onClick={() => deleteBucket(bucketId)} variant=\"danger\" >\n                                <FaTrash />\n                            </Button>\n\n                            <Button onClick={() => retrieveWebhooks(bucketId)} variant=\"info\" >\n                                <FaRedo />\n                            </Button>\n                        </Col>\n                    </Row>\n\n                    <Form>\n                        <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n                            <Form.Control type=\"text\"\n                                placeholder=\"Payload fields in summary (comma separated)\"\n                                value={fieldsSummary}\n                                onChange={event => {\n                                    setFieldsSummary(event.target.value)\n                                }} />\n                        </Form.Group>\n                    </Form>\n                    {webhookList}\n                </Col>\n                <Col className='col-9'>\n                    <WebhookDetails selectedWebhook={selectedWebhook} />\n                </Col>\n            </Row>\n        </Container>\n\n    );\n};\n\nexport default DisplayWebhooks;\n","import React, { useState, useEffect } from \"react\";\nimport { useBucket } from '../context/BucketProvider';\nimport { Container, Row, Col } from 'react-bootstrap';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport { FaSave } from \"react-icons/fa\";\nimport { apiPath } from \"./Webhooks\"\nimport axios from \"axios\";\n\nexport var BucketConfig = () => {\n  const [config, setConfig] = useState({ status_code: 0, response_body: \"\" });\n\n  // Queries\n  const getBucketConfig = async (bucketId) => {\n    await axios.get(apiPath + \"/api/\" + bucketId + \"/config\")\n      .then(res => { setConfig(res.data); });\n  };\n  const saveBucketConfig = async (bucketId) => {\n    console.log(config)\n    await axios.post(apiPath + \"/api/\" + bucketId + \"/config\", config);\n  };\n\n  const bucketState = useBucket();\n  var bucketId = \"\";\n  if (bucketState) {\n    bucketId = bucketState.id;\n  }\n\n  useEffect(() => {\n    if (bucketId) {\n      getBucketConfig(bucketId)\n    }\n  }, [bucketState])\n\n  return (\n    <div>\n      <Form>\n        <Row className=\"align-items-center justify-content-center\">\n          <Col className='col-2'>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlInput1\">\n              <Form.Label>Response status code</Form.Label>\n              <Form.Control type=\"number\" placeholder=\"200\"\n                value={config.status_code}\n                onChange={event => {\n                  setConfig({\n                    status_code: parseInt(event.target.value),\n                    response_body: config.response_body\n                  });\n                }}\n              />\n            </Form.Group>\n          </Col>\n          <Col className='col-5'>\n            <Form.Group className=\"mb-3\" controlId=\"exampleForm.ControlTextarea1\">\n              <Form.Label>Response payload</Form.Label>\n              <Form.Control as=\"textarea\" rows={1}\n                value={config.response_body}\n                onChange={event => {\n                  setConfig({\n                    status_code: config.status_code,\n                    response_body: event.target.value,\n                  });\n                }}\n              />\n            </Form.Group>\n          </Col>\n\n          <Col className='col-1'>\n            <Button onClick={() => saveBucketConfig(bucketId)} variant=\"success\" >\n              <FaSave />\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <hr />\n    </div>\n  );\n};\n\nexport default BucketConfig;\n","import React from \"react\";\nimport { useBucket } from '../context/BucketProvider';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport BucketConfig from \"./BucketConfig\"\n\nexport var Header = () => {\n  const bucketState = useBucket();\n\n  var bucketId = \"Loading...\";\n  if (bucketState) {\n    bucketId = bucketState.id;\n  }\n\n  var apiRoot = window.location.origin + \"/api/\" + bucketId\n\n  return (\n    <div className=\"header\">\n      <h1>Capt'n Hook 🏴‍☠️ </h1>\n      <hr />\n      <Row>\n        <Col className='col-8'>\n          <div>\n            <h4>Set webhook URL: {apiRoot}/catch</h4>\n            <h4>API to check calls: {apiRoot}/check</h4>\n          </div>\n        </Col>\n        <Col className='col-4'>\n          <h4>Bucket ID: {bucketId}</h4>\n        </Col>\n      </Row>\n      <hr />\n      <BucketConfig />\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\n\nimport { BucketProvider } from './context/BucketProvider';\nimport { DisplayWebhooks } from './components/Webhooks';\nimport { Header } from \"./components/Header\";\n\n\nclass App extends Component {\n  render() {\n    return (\n          <BucketProvider basename=\"/\">\n            <div className=\"container\" style={{maxWidth: \"unset\"}}>\n              <Header />\n              <DisplayWebhooks />\n            </div>\n          </BucketProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <Router>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>,\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}