{"version":3,"sources":["context/BucketProvider.js","components/WebhookDetails.js","components/Webhooks.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["BucketContext","createContext","useBucket","useContext","BucketProvider","children","useState","bucketState","setSingletonState","navigate","useNavigate","useEffect","bucketIdQueryParam","URLSearchParams","window","location","search","get","bucketID","uuidv4","pathname","id","Provider","value","WebhookDetails","props","selectedWebhook","key","timestamp","url","headers","map","header","index","body","retrieveWebhooks","params","a","console","log","queryKey","bucketId","axios","response","data","DisplayWebhooks","setSelectedWebhook","useQuery","skip","webhooks","error","isLoading","message","webhook","onClick","style","cursor","Header","className","App","basename","Component","Boolean","hostname","match","queryClient","QueryClient","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QAKMA,EAAgBC,0BAETC,EAAY,WACrB,OAAOC,qBAAWH,IAGTI,EAAiB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACHC,mBAAS,MADN,mBACrCC,EADqC,KACxBC,EADwB,KAEtCC,EAAWC,cAoBjB,OAlBAC,qBAAU,WACN,IACIC,EADe,IAAIC,gBAAgBC,OAAOC,SAASC,QACjBC,IAAI,aACtCC,EAAWN,EAGVA,IACDM,EAAWC,cACXV,EAAS,CACLW,SAAU,IACVJ,OAAQ,cAAgBE,KAGhCV,EAAkB,CACda,GAAIH,MAET,IAGC,kBAAClB,EAAcsB,SAAf,CAAwBC,MAAOhB,GAC1BF,I,wCCjCAmB,EAAiB,SAACC,GAC3B,IAAIC,EAAkBD,EAAMC,gBAC5B,OAAIA,EAOA,6BACI,+CACA,4BACI,wBAAIC,IAAKD,EAAgBL,IACrB,uCADJ,IAC0BK,EAAgBL,GAAG,6BACzC,8CAFJ,IAEiCK,EAAgBE,UAAU,6BACvD,wCAHJ,IAG2BF,EAAgBG,IAAI,6BAC3C,4CACA,4BACKH,EAAgBI,QAAQC,KAAI,SAACC,EAAQC,GAAT,OACzB,wBAAIN,IAAKM,GAAQD,OAGzB,yCACCN,EAAgBQ,KACjB,6BACA,gCAtBL,wECETC,EAAgB,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACrBC,QAAQC,IAAI,WAAYH,EAAOI,UADV,cAECJ,EAAOI,SAFR,QAEXC,EAFW,cAGEC,IAAMzB,IAAI,QAAUwB,EAAW,UAHjC,cAGfE,EAHe,yBAIdA,EAASC,MAJK,2CAAH,sDASTC,EAAkB,WAAO,IAAD,EACavC,mBAAS,MADtB,mBAC1BoB,EAD0B,KACToB,EADS,KAI3BvC,EAAcL,IAChBuC,EAAW,GACXlC,IACAkC,EAAWlC,EAAYc,IAPM,MAWY0B,mBAAS,CAAC,eAAgBN,GAAWN,EAAkB,CAAEa,MAAOzC,IAA/F0C,EAXmB,EAWzBL,KAAgBM,EAXS,EAWTA,MACxB,OAZiC,EAWFC,UACT,qDAClBD,EAAc,6EAAmDA,EAAME,SACtEH,GAGeA,EAIhB,6BACI,6CACA,4BACKA,EAASlB,KAAI,SAACsB,GAAD,OACV,wBAAI1B,IAAK0B,EAAQhC,GAAIiC,QAAS,kBAAMR,EAAmBO,IAAUE,MAAO,CAAEC,OAAQ,YAC9E,uCADJ,IAC0BH,EAAQhC,GAAG,6BACjC,8CAFJ,IAEiCgC,EAAQzB,UAAU,6BAC/C,6BACA,kCAKZ,kBAAC,EAAD,CAAgBF,gBAAiBA,MAnB9B,4BC5BJ+B,EAAS,WAClB,IAAMlD,EAAcL,IAEhBuC,EAAW,aAKf,OAJIlC,IACFkC,EAAWlC,EAAYc,IAIvB,yBAAKqC,UAAU,UACb,2EACA,0CAAgBjB,KCMPkB,E,uKAXX,OACM,kBAAC,EAAD,CAAgBC,SAAS,KACvB,yBAAKF,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Y,GANIG,aCKEC,QACW,cAA7BhD,OAAOC,SAASgD,UAEe,UAA7BjD,OAAOC,SAASgD,UAEhBjD,OAAOC,SAASgD,SAASC,MACvB,2D,YCTAC,EAAc,IAAIC,cAExBC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,sBAAD,CAAqBC,OAAQJ,GACzB,kBAAC,EAAD,OAFR,KAKEK,SAASC,eAAe,SDgHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0dc45ffb.chunk.js","sourcesContent":["import React from \"react\";\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useNavigate } from 'react-router-dom';\n\nconst BucketContext = createContext();\n\nexport const useBucket = () => {\n    return useContext(BucketContext);\n};\n\nexport const BucketProvider = ({ children }) => {\n    const [bucketState, setSingletonState] = useState(null);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        let searchParams = new URLSearchParams(window.location.search);\n        let bucketIdQueryParam = searchParams.get('bucket_id');\n        var bucketID = bucketIdQueryParam;\n\n\n        if (!bucketIdQueryParam) {\n            bucketID = uuidv4()\n            navigate({\n                pathname: '/',\n                search: '?bucket_id=' + bucketID,\n            });\n        }\n        setSingletonState({\n            id: bucketID\n        });\n    }, []);\n\n    return (\n        <BucketContext.Provider value={bucketState}>\n            {children}\n        </BucketContext.Provider>\n    );\n};","import React from 'react';\n\nexport const WebhookDetails = (props) => {\n    var selectedWebhook = props.selectedWebhook;\n    if(!selectedWebhook){\n        return <div>\n            Please select a webhook to see details\n        </div>\n    }\n\n    return (\n        <div>\n            <h1>Webhook Details</h1>\n            <ul>\n                <li key={selectedWebhook.id}>\n                    <strong>ID:</strong> {selectedWebhook.id}<br />\n                    <strong>Timestamp:</strong> {selectedWebhook.timestamp}<br />\n                    <strong>URL:</strong> {selectedWebhook.url}<br />\n                    <strong>Headers:</strong>\n                    <ul>\n                        {selectedWebhook.headers.map((header, index) => (\n                            <li key={index}>{header}</li>\n                        ))}\n                    </ul>\n                    <strong>Body:</strong>\n                    {selectedWebhook.body}\n                    <br />\n                    <hr />\n                </li>\n            </ul>\n        </div>\n    );\n};\n\nexport default WebhookDetails;\n\n","import React, {useState} from \"react\";\nimport { useQuery } from \"react-query\";\nimport axios from \"axios\";\n\nimport { useBucket } from '../context/BucketProvider';\nimport { WebhookDetails } from '../components/WebhookDetails';\n\nconst retrieveWebhooks = async (params) => {\n    console.log(\"queryKey\", params.queryKey)\n    const [_, bucketId] = params.queryKey\n    const response = await axios.get(\"/api/\" + bucketId + \"/check\");\n    return response.data;\n};\n\nexport var retrievedWebhooks;\n\nexport const DisplayWebhooks = () => {\n    const [selectedWebhook, setSelectedWebhook] = useState(null);\n\n    // Resolve bucket\n    const bucketState = useBucket();\n    var bucketId = \"\";\n    if (bucketState) {\n        bucketId = bucketState.id;\n    }\n\n    // Handle request\n    const { data: webhooks, error, isLoading } = useQuery([\"webhooksData\", bucketId], retrieveWebhooks, { skip: !bucketState });\n    if (isLoading) return <div>Fetching webhooks...</div>;\n    if (error) return <div>An error occurred while retrieving webhooks: {error.message}</div>;\n    if (!webhooks) {\n        return \"No webhooks recorded yet\"\n    }\n    retrievedWebhooks = webhooks;\n\n    // Render\n    return (\n        <div>\n            <h1>Webhook Calls</h1>\n            <ul>\n                {webhooks.map((webhook) => (\n                    <li key={webhook.id} onClick={() => setSelectedWebhook(webhook)} style={{ cursor: 'pointer' }}>\n                        <strong>ID:</strong> {webhook.id}<br />\n                        <strong>Timestamp:</strong> {webhook.timestamp}<br />\n                        <br />\n                        <hr />\n                    </li>\n                ))}\n            </ul>\n\n            <WebhookDetails selectedWebhook={selectedWebhook} />\n        </div>\n    );\n};\n\nexport default DisplayWebhooks;\n","import React from \"react\";\nimport { useBucket } from '../context/BucketProvider';\n\nexport var Header = () => {\n  const bucketState = useBucket();\n\n  var bucketId = \"Loading...\";\n  if (bucketState) {\n    bucketId = bucketState.id;\n  }\n  \n  return (\n    <div className=\"header\">\n      <h1>Capt'n Hook üè¥‚Äç‚ò†Ô∏è </h1>\n      <h2>Bucket ID: {bucketId}</h2>\n    </div>\n  );\n};\n","import React, { Component } from \"react\";\n\nimport { BucketProvider } from './context/BucketProvider';\nimport { DisplayWebhooks } from './components/Webhooks';\nimport { Header } from \"./components/Header\";\n\n\nclass App extends Component {\n  render() {\n    return (\n          <BucketProvider basename=\"/\">\n            <div className=\"container\">\n              <Header />\n              <DisplayWebhooks />\n            </div>\n          </BucketProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter as Router, Switch, Redirect } from \"react-router-dom\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n    <Router>\n        <QueryClientProvider client={queryClient}>\n            <App />\n        </QueryClientProvider>,\n    </Router>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}